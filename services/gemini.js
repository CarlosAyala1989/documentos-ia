const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
    constructor() {
        // Array de API keys disponibles
        this.apiKeys = [
            process.env.API_KEY_1,
            process.env.API_KEY_2,
            process.env.API_KEY_3,
            process.env.API_KEY_4
        ].filter(key => key); // Filtrar keys que no est√©n definidas
        
        this.currentKeyIndex = 0;
        this.ai = null;
        
        if (this.apiKeys.length > 0) {
            this.initializeAPI();
        } else {
            console.error('‚ùå No hay API keys de Google AI configuradas');
        }
    }
    
    initializeAPI() {
        if (this.apiKeys.length === 0) {
            throw new Error('No hay API keys de Google AI configuradas');
        }
        
        try {
            this.ai = new GoogleGenerativeAI(this.apiKeys[this.currentKeyIndex]);
            console.log(`‚úÖ Gemini inicializado con API key ${this.currentKeyIndex + 1}`);
        } catch (error) {
            console.error('‚ùå Error al inicializar Gemini:', error);
            throw error;
        }
    }
    
    // Cambiar a la siguiente API key si hay problemas
    switchToNextKey() {
        if (this.currentKeyIndex < this.apiKeys.length - 1) {
            this.currentKeyIndex++;
            this.initializeAPI();
            return true;
        }
        return false;
    }
    
    // Analizar c√≥digo fuente
    async analizarCodigo(contenidoCodigo, nombreArchivo, lenguajeProgramacion = 'auto') {
        if (!this.ai) {
            throw new Error('Gemini no est√° inicializado correctamente');
        }
        
        const prompt = this.construirPromptAnalisis(contenidoCodigo, nombreArchivo, lenguajeProgramacion);
        
        let intentos = 0;
        const maxIntentos = this.apiKeys.length;
        
        while (intentos < maxIntentos) {
            try {
                console.log(`üîç Analizando c√≥digo con Gemini (intento ${intentos + 1}/${maxIntentos})`);
                
                // Cambiar de 'gemini-pro' a 'gemini-1.5-flash'
                const model = this.ai.getGenerativeModel({ model: "gemini-1.5-flash" });
                const response = await model.generateContent(prompt);
                
                const analisis = response.response.text();
                
                console.log('‚úÖ An√°lisis completado exitosamente');
                return {
                    success: true,
                    analisis: analisis,
                    lenguaje_detectado: this.detectarLenguaje(nombreArchivo, contenidoCodigo),
                    estadisticas: this.calcularEstadisticas(contenidoCodigo),
                    api_key_usada: this.currentKeyIndex + 1
                };
                
            } catch (error) {
                console.error(`‚ùå Error con API key ${this.currentKeyIndex + 1}:`, error.message);
                
                if (error.message.includes('quota') || 
                    error.message.includes('limit') || 
                    error.message.includes('403') ||
                    error.message.includes('429') ||
                    error.status === 429) {
                    console.log('üîÑ Cambiando a siguiente API key...');
                    if (!this.switchToNextKey()) {
                        console.error('‚ùå Se agotaron todas las API keys disponibles');
                        break;
                    }
                } else {
                    throw error;
                }
                
                intentos++;
            }
        }
        
        return {
            success: false,
            error: 'Se agotaron todas las API keys o hay un error en el servicio',
            analisis: null
        };
    }
    
    construirPromptAnalisis(codigo, nombreArchivo, lenguaje) {
        return `
Eres un experto desarrollador de software. Analiza el siguiente c√≥digo fuente y proporciona un an√°lisis detallado.

**Archivo:** ${nombreArchivo}
**Lenguaje detectado:** ${lenguaje}

**C√≥digo a analizar:**
\`\`\`${lenguaje}
${codigo}
\`\`\`

Por favor, proporciona un an√°lisis completo que incluya:

1. **Resumen General:**
   - ¬øQu√© hace este c√≥digo?
   - Prop√≥sito principal y funcionalidad

2. **Estructura y Componentes:**
   - Clases, funciones, m√≥dulos principales
   - Patrones de dise√±o utilizados
   - Arquitectura del c√≥digo

3. **An√°lisis Funcional:**
   - Funciones/m√©todos principales y su prop√≥sito
   - Flujo de ejecuci√≥n
   - Entradas y salidas

4. **Dependencias y Tecnolog√≠as:**
   - Librer√≠as/frameworks utilizados
   - Dependencias externas
   - APIs o servicios consumidos

5. **Calidad del C√≥digo:**
   - Buenas pr√°cticas aplicadas
   - Posibles mejoras
   - Nivel de complejidad

6. **Casos de Uso:**
   - Escenarios donde se usar√≠a este c√≥digo
   - Tipo de aplicaci√≥n o sistema

Proporciona el an√°lisis en espa√±ol, de manera clara y estructurada.
`;
    }
    
    detectarLenguaje(nombreArchivo, contenido) {
        const extension = nombreArchivo.split('.').pop().toLowerCase();
        
        const lenguajes = {
            'js': 'JavaScript',
            'jsx': 'React (JavaScript)',
            'ts': 'TypeScript',
            'tsx': 'React (TypeScript)',
            'py': 'Python',
            'java': 'Java',
            'cpp': 'C++',
            'c': 'C',
            'cs': 'C#',
            'php': 'PHP',
            'rb': 'Ruby',
            'go': 'Go',
            'rs': 'Rust',
            'html': 'HTML',
            'css': 'CSS',
            'scss': 'SCSS',
            'vue': 'Vue.js',
            'kt': 'Kotlin',
            'swift': 'Swift',
            'dart': 'Dart',
            'sql': 'SQL'
        };
        
        return lenguajes[extension] || 'Desconocido';
    }
    
    calcularEstadisticas(codigo) {
        const lineas = codigo.split('\n');
        const lineasNoVacias = lineas.filter(linea => linea.trim().length > 0);
        const comentarios = lineas.filter(linea => {
            const lineaTrimmed = linea.trim();
            return lineaTrimmed.startsWith('//') || 
                   lineaTrimmed.startsWith('#') || 
                   lineaTrimmed.startsWith('/*') ||
                   lineaTrimmed.startsWith('*') ||
                   lineaTrimmed.startsWith('<!--');
        });
        
        return {
            total_lineas: lineas.length,
            lineas_codigo: lineasNoVacias.length,
            lineas_comentarios: comentarios.length,
            caracteres: codigo.length,
            palabras: codigo.split(/\s+/).filter(word => word.length > 0).length
        };
    }
    
    // Generar documentaci√≥n SRS
    async generarDocumentacionSRS(analisisProyecto) {
        if (!this.ai) {
            throw new Error('Gemini no est√° inicializado correctamente');
        }
        
        const prompt = `
Como experto en ingenier√≠a de software, genera un documento SRS (Software Requirements Specification) completo basado en el siguiente an√°lisis de c√≥digo:

${analisisProyecto}

El documento SRS debe incluir:

1. **Introducci√≥n**
   - Prop√≥sito del documento
   - Alcance del producto
   - Definiciones y acr√≥nimos

2. **Descripci√≥n General**
   - Perspectiva del producto
   - Funciones del producto
   - Caracter√≠sticas de los usuarios
   - Restricciones

3. **Requisitos Espec√≠ficos**
   - Requisitos funcionales (RF-001, RF-002, etc.)
   - Requisitos no funcionales (RNF-001, RNF-002, etc.)
   - Requisitos de interfaz

4. **Ap√©ndices**
   - Glosario
   - Referencias

Genera el documento en formato markdown, bien estructurado y profesional.
        `;
        
        return await this.procesarConGemini(prompt);
    }
    
    // M√©todo auxiliar para procesar prompts con Gemini
    async procesarConGemini(prompt) {
        if (!this.ai) {
            throw new Error('Gemini no est√° inicializado correctamente');
        }
        
        let intentos = 0;
        const maxIntentos = this.apiKeys.length;
        
        while (intentos < maxIntentos) {
            try {
                // Cambiar de 'gemini-pro' a 'gemini-1.5-flash'
                const model = this.ai.getGenerativeModel({ model: "gemini-1.5-flash" });
                const response = await model.generateContent(prompt);
                
                return {
                    success: true,
                    contenido: response.response.text(),
                    api_key_usada: this.currentKeyIndex + 1
                };
                
            } catch (error) {
                console.error(`‚ùå Error con API key ${this.currentKeyIndex + 1}:`, error.message);
                
                if (error.message.includes('quota') || 
                    error.message.includes('limit') ||
                    error.message.includes('429') ||
                    error.status === 429) {
                    if (!this.switchToNextKey()) {
                        break;
                    }
                } else {
                    throw error;
                }
                
                intentos++;
            }
        }
        
        return {
            success: false,
            error: 'Error al procesar con Gemini',
            contenido: null
        };
    }

    // Nueva funci√≥n: Analizar PDF personalizado y completarlo con c√≥digo
    async completarDocumentoPersonalizado(contenidoPDF, analisisProyecto, tipoDocumento = 'SRS') {
        if (!this.ai) {
            throw new Error('Gemini no est√° inicializado correctamente');
        }

        const prompt = `
Como experto en ingenier√≠a de software, tienes un documento ${tipoDocumento} personalizado que necesita ser completado bas√°ndose en el an√°lisis de c√≥digo de un proyecto.

**DOCUMENTO PERSONALIZADO EXISTENTE:**
${contenidoPDF}

**AN√ÅLISIS DEL PROYECTO:**
${analisisProyecto}

**INSTRUCCIONES:**
1. Analiza el documento personalizado existente para entender su estructura y formato
2. Identifica las secciones que est√°n incompletas o que necesitan informaci√≥n adicional
3. Completa el documento usando la informaci√≥n del an√°lisis del proyecto
4. Mant√©n el formato y estilo del documento original
5. Agrega informaci√≥n relevante basada en el c√≥digo analizado
6. Si el documento requiere diagramas UML, proporciona el c√≥digo PlantUML correspondiente

**FORMATO DE RESPUESTA:**
Devuelve el documento completado en el mismo formato que el original, pero con toda la informaci√≥n faltante agregada bas√°ndose en el an√°lisis del c√≥digo.

Si necesitas generar diagramas UML, incluye el c√≥digo PlantUML en secciones claramente marcadas como:
\`\`\`plantuml
[c√≥digo PlantUML aqu√≠]
\`\`\`
        `;

        return await this.procesarConGemini(prompt);
    }

    // Nueva funci√≥n: Generar diagramas PlantUML espec√≠ficos
    async generarDiagramasUML(analisisProyecto, tipoDiagrama = 'clases') {
        if (!this.ai) {
            throw new Error('Gemini no est√° inicializado correctamente');
        }

        const prompt = `
Como experto en UML y arquitectura de software, genera c√≥digo PlantUML para crear diagramas basados en el siguiente an√°lisis de c√≥digo:

**AN√ÅLISIS DEL PROYECTO:**
${analisisProyecto}

**TIPO DE DIAGRAMA SOLICITADO:** ${tipoDiagrama}

**INSTRUCCIONES:**
1. Analiza el c√≥digo y identifica las clases, m√©todos, relaciones y dependencias
2. Genera c√≥digo PlantUML apropiado para el tipo de diagrama solicitado
3. Incluye comentarios explicativos en el c√≥digo PlantUML
4. Aseg√∫rate de que el diagrama sea claro y profesional

**TIPOS DE DIAGRAMAS DISPONIBLES:**
- clases: Diagrama de clases mostrando estructura y relaciones
- secuencia: Diagrama de secuencia mostrando flujo de ejecuci√≥n
- componentes: Diagrama de componentes mostrando arquitectura
- casos_uso: Diagrama de casos de uso
- actividad: Diagrama de actividad mostrando flujo de procesos

**FORMATO DE RESPUESTA:**
Devuelve √∫nicamente el c√≥digo PlantUML v√°lido, sin explicaciones adicionales, en el siguiente formato:

\`\`\`plantuml
@startuml
[c√≥digo PlantUML aqu√≠]
@enduml
\`\`\`
        `;

        return await this.procesarConGemini(prompt);
    }

    // Nueva funci√≥n: An√°lisis avanzado con m√∫ltiples APIs
    async analisisAvanzadoConMultiplesAPIs(contenidoPDF, analisisProyecto, tipoDocumento) {
        console.log('üîÑ Iniciando an√°lisis avanzado con m√∫ltiples APIs de Gemini...');
        
        try {
            // Primera API: An√°lisis del documento personalizado
            console.log('üìã Paso 1: Analizando estructura del documento personalizado...');
            const analisisDocumento = await this.analizarEstructuraDocumento(contenidoPDF, tipoDocumento);
            
            if (!analisisDocumento.success) {
                throw new Error('Error en an√°lisis de documento: ' + analisisDocumento.error);
            }

            // Segunda API: Completar documento con informaci√≥n del proyecto
            console.log('‚úçÔ∏è Paso 2: Completando documento con informaci√≥n del proyecto...');
            const documentoCompletado = await this.completarDocumentoPersonalizado(
                contenidoPDF, 
                analisisProyecto, 
                tipoDocumento
            );
            
            if (!documentoCompletado.success) {
                throw new Error('Error al completar documento: ' + documentoCompletado.error);
            }

            // Tercera API: Generar diagramas UML si es necesario
            console.log('üé® Paso 3: Generando diagramas UML...');
            const diagramasUML = await this.generarDiagramasUML(analisisProyecto, 'clases');
            
            if (!diagramasUML.success) {
                console.warn('‚ö†Ô∏è No se pudieron generar diagramas UML');
            }

            console.log('‚úÖ An√°lisis avanzado completado exitosamente');
            
            return {
                success: true,
                documento_completado: documentoCompletado.contenido,
                diagramas_uml: diagramasUML.success ? diagramasUML.contenido : null,
                analisis_estructura: analisisDocumento.contenido,
                api_keys_usadas: [
                    analisisDocumento.api_key_usada,
                    documentoCompletado.api_key_usada,
                    diagramasUML.api_key_usada
                ].filter(Boolean)
            };
            
        } catch (error) {
            console.error('‚ùå Error en an√°lisis avanzado:', error);
            return {
                success: false,
                error: error.message,
                documento_completado: null
            };
        }
    }

    // Funci√≥n auxiliar: Analizar estructura del documento
    async analizarEstructuraDocumento(contenidoPDF, tipoDocumento) {
        const prompt = `
Analiza la estructura y formato del siguiente documento ${tipoDocumento}:

${contenidoPDF}

**INSTRUCCIONES:**
1. Identifica las secciones principales del documento
2. Detecta qu√© informaci√≥n falta o est√° incompleta
3. Determina el estilo y formato utilizado
4. Sugiere qu√© tipo de informaci√≥n del c√≥digo ser√≠a relevante para cada secci√≥n

**FORMATO DE RESPUESTA:**
Devuelve un an√°lisis estructurado que incluya:
- Secciones identificadas
- Informaci√≥n faltante
- Estilo del documento
- Recomendaciones para completar
        `;

        return await this.procesarConGemini(prompt);
    }
}

module.exports = new GeminiService();